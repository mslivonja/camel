<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!-- START SNIPPET: e1 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:broker="http://activemq.apache.org/schema/core"
       xsi:schemaLocation="
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
         http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">
    <!-- END SNIPPET: e1 -->

    <!-- START SNIPPET: e2 -->
    <!-- let Spring do its IoC stuff in this package -->
    <context:component-scan base-package="org.apache.camel.example.server"/>
    <!-- END SNIPPET: e2 -->

    <!-- spring property placeholder, ignore resource not found as the file resource is for unit testing -->
    <context:property-placeholder location="classpath:camel.properties,file:target/custom.properties"
                                ignore-resource-not-found="true"/>

    <bean id="jmsJndiTemplate" class="org.springframework.jndi.JndiTemplate">
        <property name="environment">
            <props>
                <!-- Initial context factory is set by using fasdfjndi.properties file set in classpath -->
                <prop key="java.naming.factory.initial">weblogic.jndi.WLInitialContextFactory</prop>
                <prop key="java.naming.provider.url">t3://${wls-hostname}:${wls-port}</prop>
                <!-- prop key="java.naming.security.principal">${username}</prop -->
                <!-- prop key="java.naming.security.credentials">${password}</prop -->
            </props>
        </property>
    </bean>

    <bean id="jndiDestinationResolver" class="org.springframework.jms.support.destination.JndiDestinationResolver">
        <property name="jndiTemplate" value="jmsJndiTemplate"/>
    </bean>

    <bean id="jmsConnectionFactory" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiTemplate" ref="jmsJndiTemplate"/>
        <property name="jndiName" value="jms.test.connection-factory"/>
    </bean>

    <bean id="jmsConfiguration" class="org.apache.camel.component.jms.JmsConfiguration">
        <property name="connectionFactory" ref="jmsConnectionFactory"/>
        <property name="destinationResolver" ref="jndiDestinationResolver"/>
    </bean>

    <bean id="wls" class="org.apache.camel.component.jms.JmsComponent">
        <property name="configuration" ref="jmsConfiguration"/>
    </bean>

    <bean id="fileConsumer" class="org.apache.camel.example.util.FileConsumerBean">
        <property name="rootDir" value="data/jms"/>
    </bean>

    <bean id="wlsJmsRoute" class="org.apache.camel.example.server.ServerRoutes"/>

    <!-- START SNIPPET: e3 -->
    <!-- declare a camel context that scans for classes that is RouteBuilder
       in the package org.apache.camel.example.server -->
    <camel:camelContext id="camel-server">
        <camel:package>org.apache.camel.example.server</camel:package>
        <!-- enable JMX connector so we can connect to the server and browse mbeans -->
        <!-- Camel will log at INFO level the service URI to use for connecting with jconsole -->
        <camel:jmxAgent id="agent" createConnector="true"/>

        <!-- Camel routes -->
        <camel:routeBuilder ref="wlsJmsRoute"/>

    </camel:camelContext>
  <!-- END SNIPPET: e3 -->

</beans>
